import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as l,b as s,e as n,d as e,a as t}from"./app-D1uezr0R.js";const p="/assets/image-20230813145022447-DTzGXxnX.gif",r="/assets/true-image-20230813145411111-BBg-g9jO.png",u="/assets/true-image-20230813143325766-BLwKvOGW.png",d="/assets/true-image-20230813150022249-BHQHJGh0.png",k="/assets/image-20230813161652508-CBdepOl6.gif",v="/assets/true-image-20230813161734829-25X1jcjV.png",m="/assets/true-image-20230813161735645-DLo_oKng.png",b="/assets/image-Link-VmdSFNO7.gif",h="/assets/true-image-Link-targetList-DtZ0JiBQ.png",g="/assets/true-image-clickIndex-C3G1LdnG.png",f="/assets/true-image-ProvideConsume-BOC1OiJ3.png",x={},_=t('<p>包含了 管理组件状态、Video视频组件、应用弹窗等知识。</p><h1 id="harmonyos第一课之构建更加丰富的页面" tabindex="-1"><a class="header-anchor" href="#harmonyos第一课之构建更加丰富的页面"><span>HarmonyOS第一课之构建更加丰富的页面</span></a></h1><h2 id="管理组件状态" tabindex="-1"><a class="header-anchor" href="#管理组件状态"><span>管理组件状态</span></a></h2><p>包含了 管理组件状态（@State、@Prop、@Link、@Provide、@Consume、@Watch）</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><blockquote><p>在应用中，界面通常都是动态的。如图1所示，在子目标列表中，当用户点击目标一，目标一会呈现展开状态，再次点击目标一，目标一呈现收起状态。界面会根据不同的状态展示不一样的效果。</p></blockquote><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ArkUI作为一种声明式UI，具有状态驱动UI更新的特点。当用户进行界面交互或有外部事件引起状态改变时，状态的变化会触发组件自动更新。所以在ArkUI中，我们只需要通过一个变量来记录状态。当改变状态的时候，ArkUI就会自动更新界面中受影响的部分。</p><p>ArkUI框架提供了多种管理状态的装饰器来修饰变量，使用这些装饰器修饰的变量即称为状态变量。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在组件内使用<code>@State</code>装饰器来修饰变量，可以使组件根据不同的状态来呈现不同的效果。</li><li>若当前组件的状态需要通过其父组件传递而来，此时需要使用<code>@Prop</code>装饰器；</li><li>若是父子组件状态需要相互绑定进行双向同步，则需要使用<code>@Link</code>装饰器。</li><li>使用<code>@Provide</code>和<code>@Consume</code>装饰器可以实现跨组件层级双向同步状态。</li></ul>',13),y=s("code",null,"@Observed",-1),I=s("code",null,"@ObjectLink",-1),T=s("br",null,null,-1),L={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-observed-and-objectlink-0000001473697338-V2",target:"_blank",rel:"noopener noreferrer"},C=t('<p>另外，当状态改变，需要对状态变化进行监听做一些相应的操作时，可以使用<code>@Watch</code>装饰器来修饰状态。</p><h3 id="state装饰器-组件内的状态" tabindex="-1"><a class="header-anchor" href="#state装饰器-组件内的状态"><span>@State装饰器：组件内的状态</span></a></h3><img src="'+p+'" style="zoom:67%;"><p>设置一个 <code>@State</code>装饰器 修饰的状态变量为 <code>isExpanded</code> ，当其值为 false 表示目标项收起，值为 true 时表示目标项展开。<br> 通过<code>@State</code>装饰后，框架内部会建立数据与视图间的绑定，当isExpanded状态变化时，目标项会随之展开或收起。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其具体实现只要用@State修饰isExpanded变量，定义是否展开状态。然后通过条件渲染，实现是否显示进度调整面板和列表项的高度变化。<br> 最后，监听列表项的点击事件，在onClick回调中改变isExpanded状态。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetListItem <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isExpanded<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">Blank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token function">ProgressEditPanel</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isExpanded <span class="token operator">?</span> <span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.float.expanded_item_height&#39;</span><span class="token punctuation">)</span>                  
      <span class="token operator">:</span> <span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.float.list_item_height&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
             <span class="token keyword">this</span><span class="token punctuation">.</span>isExpanded <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isExpanded<span class="token punctuation">;</span>
        <span class="token operator">...</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prop装饰器-父子单向同步" tabindex="-1"><a class="header-anchor" href="#prop装饰器-父子单向同步"><span>@Prop装饰器：父子单向同步</span></a></h3><ul><li>当子组件中的状态依赖从父组件传递而来时，需要使用@Prop装饰器，@Prop修饰的变量可以和其父组件中的状态建立单向同步关系。</li><li>当父组件中状态变化时，该状态值也会更新至@Prop修饰的变量；对@Prop修饰的变量的修改不会影响其父组件中的状态。</li></ul><img src="`+k+'" style="zoom:67%;"><p>如图4所示，在目标管理应用中，当用户点击子目标列表的“编辑”文本，列表进入编辑模式，点击取消，列表退出编辑模式。</p><p>整个列表是自定义组件TargetList，顶部是文本显示区域，主要是Text组件，底部是一个Button组件。中间区域则是用来显示每个目标项，目标项是自定义组件TargetListItem。</p><p>从图中可以看出，TargetListItem是TargetList的子组件。TargetList是TargetListItem父组件。</p><img src="'+v+'" style="zoom:80%;"><p>对于父组件TargetList，其顶部显示的文本和底部按钮会随编辑模式的变化而变化，因此父组件拥有编辑模式状态。</p><p>对于子组件TargetListItem，其最右侧是否预留位置和显示勾选框也会随编辑模式变化，因此子组件也拥有编辑模式状态。</p><p>但是是否进入编辑模式，其触发点是在用户点击列表的“编辑”或取消按钮，状态变化的源头仅在于父组件TargetList。当父组件TargetList中的编辑模式变化时，子组件TargetListItem的编辑模式状态需要随之变化。</p><p><strong>图6</strong> 从父组件单向同步isEditMode状态</p><img src="'+m+`" style="zoom:67%;"><p>在父组件TargetList中可以定义一个是否进入编辑模式的状态，即用@State修饰isEditMode。@State修饰的变量不仅是组件内部的状态，也可以作为子组件单向或双向同步的数据源。ArkUI提供了@Prop装饰器，@Prop修饰的变量可以和其父组件中的状态建立单向同步关系，所以用@Prop修饰子组件TargetListItem中的isEditMode变量。</p><p>在父组件TargetList中，用@State修饰isEditMode，定义编辑模式状态。然后利用条件渲染实现根据是否进入编辑模式，显示不同的文本和按钮。同时，在父组件中需要在用户点击时改变状态，触发界面更新。</p><p>当点击“编辑”事件发生时，进入编辑模式，显示取消、全选文本和勾选框，同时显示删除按钮；当点击“取消”事件发生时，退出编辑模式，显示“编辑”文本和“添加子目标”按钮。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetList <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isEditMode<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.string.cancel_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token operator">...</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span>
               <span class="token operator">...</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.string.select_all_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span>
            <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.string.edit_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token operator">...</span>
          <span class="token punctuation">}</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
      <span class="token operator">...</span>
      <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> CommonConstants<span class="token punctuation">.</span><span class="token constant">LIST_SPACE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetData<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> TaskItemBean<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">TargetListItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              isEditMode<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode<span class="token punctuation">,</span>
              <span class="token operator">...</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> index<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token operator">...</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.string.delete_button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.string.add_task&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子组件TargetListItem中，使用@Prop修饰子组件的isEditMode变量，定义子组件的编辑模式状态。然后同样根据是否进入编辑模式，控制目标项最右侧是否预留位置和显示勾选框。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetListItem <span class="token punctuation">{</span>
   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span> isEditMode<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
   <span class="token operator">...</span>
       <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
       <span class="token punctuation">}</span>
       <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
        right<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode <span class="token operator">?</span> <span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.float.list_edit_padding&#39;</span><span class="token punctuation">)</span> 
               <span class="token operator">:</span> <span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.float.list_padding&#39;</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token operator">...</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>
        <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，最关键的一步就是要在父组件中使用子组件时，将父组件的编辑模式状态this.isEditMode传递给子组件的编辑模式状态isEditMode。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetList <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isEditMode<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> CommonConstants<span class="token punctuation">.</span><span class="token constant">LIST_SPACE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetData<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> TaskItemBean<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">TargetListItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              isEditMode<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isEditMode<span class="token punctuation">,</span>
              <span class="token operator">...</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> index<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="link装饰器-父子双向同步" tabindex="-1"><a class="header-anchor" href="#link装饰器-父子双向同步"><span>@Link装饰器：父子双向同步</span></a></h3><p>若是父子组件状态需要相互绑定进行双向同步时，可以使用@Link装饰器。父组件中用于初始化子组件@Link变量的必须是在父组件中定义的状态变量。</p><p><strong>图7</strong> 切换目标项</p><img src="`+b+'" alt="img" style="zoom:67%;"><p>在目标管理应用中，当用户点击同一个目标，目标项会展开或者收起。当用户点击不同的目标项时，除了被点击的目标项展开，同时前一次被点击的目标项会收起。</p><p>如图7所示，当目标一展开时，点击目标三，目标三会展开，同时目标一会收起。再点击目标一时，目标一展开，同时目标三会收起。</p><p>从目标一切换到目标三的流程中，关键在于最后目标一的收起，当点击目标三时，目标一需要知道点击了目标三，目标一才会收起。</p><p><strong>图8</strong> 子目标列表目标项位置索引</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在子目标列表中，每个列表项都有其位置索引值index属性，表示目标项在列表中的位置。index从0开始，即第一个目标项的索引值为0，第二个目标项的索引值为1，以此类推。此外，clickIndex用来记录被点击的目标项索引。当点击目标一时，clickIndex为0，点击目标三时，clickIndex为2。</p><p>在父组件子目标列表和每个子组件目标项中都拥有clickIndex状态。当目标一展开时，clickIndex为0。此时点击目标三，目标三的clickIndex变为2，只要其父组件子目标列表感知到clickIndex状态变化，同时将此变化传递给目标一。目标一的clickIndex即可同步改变为2，即目标一感知到此时点击了目标三。</p><p><strong>图9</strong> 与父组件双向同步clickIndex状态</p><img src="'+g+`" style="zoom:67%;"><p>将列表和目标项对应到列表组件TargetList和列表项TargetListItem。首先，需要在父组件TargetList中定义clickIndex状态。</p><p>若此时子组件中的clickIndex用@Prop装饰器修饰，当子组件中clickIndex变化时，父组件无法感知，因为@Prop装饰器建立的是从父组件到子组件的单向同步关系。</p><p>ArkUI提供了@Link装饰器，用于与父组件双向同步状态。当子组件TargetListItem中的clickIndex用@Link修饰，可与父组件TargetList中的clickIndex建立双向同步关系。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetList <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> clickIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> CommonConstants<span class="token punctuation">.</span><span class="token constant">DEFAULT_CLICK_INDEX</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
             <span class="token function">TargetListItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
               clickIndex<span class="token operator">:</span> $clickIndex<span class="token punctuation">,</span>
              <span class="token operator">...</span>
             <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，在父组件TargetList中用@State装饰器定义点击的目标项索引状态。然后，在子组件TargetListItem中用@Link装饰器定义clickIndex，当点击目标项时，clickIndex更新为当前目标索引值。</p><p>完成在父子组件中定义状态后，最关键的就是要建立父子组件的双向关联关系。在父组件中使用子组件时，将父组件的clickIndex传递给子组件的clickIndex。其中父组件的clickIndex加上$表示传递的是引用。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> struct TargetListItem <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Link</span></span> @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">&#39;onClickIndexChanged&#39;</span><span class="token punctuation">)</span> clickIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isExpanded<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token operator">...</span>

  <span class="token function">onClickIndexChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickIndex <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isExpanded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
       <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
       <span class="token punctuation">}</span>
       <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>clickIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
        <span class="token operator">...</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当目标一感知到点击了目标三时，还需要将目标一收起，切换列表项的功能才是完整的。此时，目标一感知到clickIndex变为2，需要判断与目标一本身的位置索引值0不相等，从而将目标一收起。此时，就需要用到ArkUI中监听状态变化@Watch的能力。用@Watch修饰的状态，当状态发生变化时，会触发声明时定义的回调。</p><p>我们给TargetListItem的中的clickIndex状态加上@Watch(&quot;onClickIndexChanged&quot;)。这表示需要监听clickIndex状态的变化。当clickIndex状态变化时，将触发onClickIndexChanged回调：如果点击的列表项索引不等于当前列表项索引，则将isExpanded状态置为false，从而收起该目标项。</p><h3 id="provide和-consume装饰器-跨组件层级双向同步" tabindex="-1"><a class="header-anchor" href="#provide和-consume装饰器-跨组件层级双向同步"><span>@Provide和@Consume装饰器: 跨组件层级双向同步</span></a></h3><img src="`+f+'" alt="img" style="zoom:67%;">',51),w={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-provide-and-consume-0000001473857338-V2",target:"_blank",rel:"noopener noreferrer"},P=s("p",null,"@Provide和@Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。不同于上文提到的父子组件之间通过命名参数机制传递，@Provide和@Consume摆脱参数传递机制的束缚，实现跨层级传递。",-1),E=s("p",null,"跨组件层级双向同步状态是指@Provide修饰的状态变量自动对提供者组件的所有后代组件可用，后代组件通过使用@Consume装饰的变量来获得对提供的状态变量的访问。@Provide作为数据的提供方，可以更新其子孙节点的数据，并触发页面渲染。@Consume在感知到@Provide数据的更新后，会触发当前自定义组件的重新渲染。",-1),S={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-provide-and-consume-0000001473857338-V2",target:"_blank",rel:"noopener noreferrer"},M=t(`<h3 id="源码目录说明" tabindex="-1"><a class="header-anchor" href="#源码目录说明"><span>源码目录说明</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>├──entry/src/main/ets                   // 代码区
│  ├──common
│  │  ├──bean
│  │  │  └──TaskItemBean.ets            // 任务进展实体类
│  │  ├──constants
│  │  │  └──CommonConstants.ets         // 公共常量类
│  │  └──utils
│  │     ├──DateUtil.ets                // 获取格式化日期工具
│  │     └──Logger.ts                   // 日志打印工具类
│  ├──entryability
│  │  └──EntryAbility.ts                // 程序入口类
│  ├──pages
│  │  └──MainPage.ets                   // 主页面
│  ├──view
│  │  ├──TargetInformation.ets          // 整体目标详情自定义组件
│  │  ├──AddTargetDialog.ets            // 自定义弹窗
│  │  ├──ProgressEditPanel.ets          // 进展调节自定义组件
│  │  ├──TargetList.ets                 // 工作目标列表
│  │  └──TargetListItem.ets             // 工作目标列表子项
│  └──viewmodel
│     ├──DataModel.ets                  // 工作目标数据操作类
│     ├──MainPageModel.ets              // 主页面业务处理文件
│     ├──TaskListItemModel              // 工作目标列表子项业务处理文件
│     └──TaskListViewModel.ets          // 工作目标列表业务处理文件
└──entry/src/main/resources             // 资源文件目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MainPage</strong>作为本应用的主界面，从上至下由三个自定义组件组成。</p><ol><li><p>标题titleBar。</p></li><li><p>目标整体进展详情TargetInformation。</p></li><li><p>子目标列表TargetList。</p></li></ol><p><strong>MainPage 主要维护五个参数</strong></p><p>子目标数组<code>targetData</code>、子目标总数<code>totalTasksNumber</code>、已完成子目标数<code>completedTasksNumber</code>、最近更新时间<code>latestUpdateDate</code>、监听数据变化的参数<code>overAllProgressChanged</code>。具体作用有以下三个方面：</p><ol><li>子组件<code>TargetInformation</code>接收三个参数<code>totalTasksNumber</code>、<code>completedTasksNumber</code>、<code>latestUpdateDate</code>，渲染整体目标详情。</li><li>子组件<code>TargetList</code>接收参数<code>targetData</code>渲染列表。</li><li>使用<code>@Watch</code>监听<code>overAllProgressChanged</code>的变化。当<code>overAllProgressChanged</code>改变时，回调<code>onProgressChanged</code>方法，刷新整体进展<code>TargetInformation</code>。</li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3>`,8),V={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V2/arkts-state-management-overview-0000001524537145-V2",target:"_blank",rel:"noopener noreferrer"},O=t('<h2 id="video视频组件" tabindex="-1"><a class="header-anchor" href="#video视频组件"><span>Video视频组件</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><h3 id="video组件用法" tabindex="-1"><a class="header-anchor" href="#video组件用法"><span>Video组件用法</span></a></h3><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><h4 id="回调事件" tabindex="-1"><a class="header-anchor" href="#回调事件"><span>回调事件</span></a></h4><h3 id="自定义控制器的组成与实现" tabindex="-1"><a class="header-anchor" href="#自定义控制器的组成与实现"><span>自定义控制器的组成与实现</span></a></h3><h4 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h4><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h4><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h3>',10),A={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/ts-media-components-video-0000001427902484-V2",target:"_blank",rel:"noopener noreferrer"},B=t('<h2 id="应用弹窗" tabindex="-1"><a class="header-anchor" href="#应用弹窗"><span>应用弹窗</span></a></h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h3><h3 id="警告弹窗" tabindex="-1"><a class="header-anchor" href="#警告弹窗"><span>警告弹窗</span></a></h3><h3 id="选择类弹窗" tabindex="-1"><a class="header-anchor" href="#选择类弹窗"><span>选择类弹窗</span></a></h3><h4 id="文本选择弹窗" tabindex="-1"><a class="header-anchor" href="#文本选择弹窗"><span>文本选择弹窗</span></a></h4><h4 id="日期选择弹窗" tabindex="-1"><a class="header-anchor" href="#日期选择弹窗"><span>日期选择弹窗</span></a></h4><h3 id="自定义弹窗" tabindex="-1"><a class="header-anchor" href="#自定义弹窗"><span>自定义弹窗</span></a></h3><h3 id="参考-1" tabindex="-1"><a class="header-anchor" href="#参考-1"><span>参考</span></a></h3>',8),D={href:"https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V2/3_1_u5f39_u7a97-0000001478181449-V2",target:"_blank",rel:"noopener noreferrer"};function z(N,U){const a=i("ExternalLinkIcon");return c(),l("div",null,[_,s("p",null,[n("在实际应用开发中，应用会根据需要封装数据模型。如果需要观察嵌套类对象属性变化，需要使用"),y,n("和"),I,n("装饰器，"),T,n(" 因为上述表格中的装饰器只能观察到对象的第一层属性变化。可参考 "),s("a",L,[n("@Observed装饰器和@ObjectLink装饰器：嵌套类对象属性变化"),e(a)]),n("。")]),C,s("p",null,[s("a",w,[n("官方文档"),e(a)])]),P,E,s("p",null,[n("使用@Provide的好处是开发者不需要多次将变量在组件间传递。@Provide和@Consume的具体使用方法请参见开发指南："),s("a",S,[n("@Provide装饰器和@Consume装饰器：与后代组件双向同步"),e(a)]),n("。")]),M,s("p",null,[n("更多状态管理场景和相关知识请参考开发指南："),s("a",V,[n("状态管理"),e(a)]),n("。")]),O,s("p",null,[n("Video组件的更多属性和参数的使用，可以参考："),s("a",A,[n("Video API"),e(a)]),n("。")]),B,s("p",null,[s("a",D,[n("更多弹窗，您可以参考API："),e(a)])])])}const j=o(x,[["render",z],["__file","lesson1-5.html.vue"]]),W=JSON.parse('{"path":"/harmonyos/lesson1/lesson1-5.html","title":"HarmonyOS第一课之构建更加丰富的页面","lang":"zh-CN","frontmatter":{"title":"HarmonyOS第一课之构建更加丰富的页面","icon":"/icons/harmonyos/hm_16.svg","category":["HarmonyOS"],"headerDepth":5,"date":"2024-01-13T00:00:00.000Z","order":5,"tag":["HarmonyOS","鸿蒙"],"description":"包含了 管理组件状态、Video视频组件、应用弹窗等知识。","head":[["meta",{"property":"og:url","content":"https://blogres.github.io/harmonyos/lesson1/lesson1-5.html"}],["meta",{"property":"og:title","content":"HarmonyOS第一课之构建更加丰富的页面"}],["meta",{"property":"og:description","content":"包含了 管理组件状态、Video视频组件、应用弹窗等知识。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T11:52:09.000Z"}],["meta",{"property":"article:author","content":"blogres"}],["meta",{"property":"article:tag","content":"HarmonyOS"}],["meta",{"property":"article:tag","content":"鸿蒙"}],["meta",{"property":"article:published_time","content":"2024-01-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T11:52:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HarmonyOS第一课之构建更加丰富的页面\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-20T11:52:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blogres\\",\\"url\\":\\"/article\\"}]}"]]},"headers":[{"level":2,"title":"管理组件状态","slug":"管理组件状态","link":"#管理组件状态","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"@State装饰器：组件内的状态","slug":"state装饰器-组件内的状态","link":"#state装饰器-组件内的状态","children":[]},{"level":3,"title":"@Prop装饰器：父子单向同步","slug":"prop装饰器-父子单向同步","link":"#prop装饰器-父子单向同步","children":[]},{"level":3,"title":"@Link装饰器：父子双向同步","slug":"link装饰器-父子双向同步","link":"#link装饰器-父子双向同步","children":[]},{"level":3,"title":"@Provide和@Consume装饰器: 跨组件层级双向同步","slug":"provide和-consume装饰器-跨组件层级双向同步","link":"#provide和-consume装饰器-跨组件层级双向同步","children":[]},{"level":3,"title":"源码目录说明","slug":"源码目录说明","link":"#源码目录说明","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]},{"level":2,"title":"Video视频组件","slug":"video视频组件","link":"#video视频组件","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"Video组件用法","slug":"video组件用法","link":"#video组件用法","children":[{"level":4,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":4,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":4,"title":"回调事件","slug":"回调事件","link":"#回调事件","children":[]}]},{"level":3,"title":"自定义控制器的组成与实现","slug":"自定义控制器的组成与实现","link":"#自定义控制器的组成与实现","children":[{"level":4,"title":"组成","slug":"组成","link":"#组成","children":[]},{"level":4,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]},{"level":2,"title":"应用弹窗","slug":"应用弹窗","link":"#应用弹窗","children":[{"level":3,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":3,"title":"警告弹窗","slug":"警告弹窗","link":"#警告弹窗","children":[]},{"level":3,"title":"选择类弹窗","slug":"选择类弹窗","link":"#选择类弹窗","children":[{"level":4,"title":"文本选择弹窗","slug":"文本选择弹窗","link":"#文本选择弹窗","children":[]},{"level":4,"title":"日期选择弹窗","slug":"日期选择弹窗","link":"#日期选择弹窗","children":[]}]},{"level":3,"title":"自定义弹窗","slug":"自定义弹窗","link":"#自定义弹窗","children":[]},{"level":3,"title":"参考","slug":"参考-1","link":"#参考-1","children":[]}]}],"git":{"createdTime":1706536810000,"updatedTime":1710935529000,"contributors":[{"name":"topjfy","email":"topjfk@163.com","commits":4}]},"readingTime":{"minutes":11.89,"words":3566},"filePathRelative":"harmonyos/lesson1/lesson1-5.md","localizedDate":"2024年1月13日","excerpt":"<p>包含了 管理组件状态、Video视频组件、应用弹窗等知识。</p>\\n","autoDesc":true}');export{j as comp,W as data};
