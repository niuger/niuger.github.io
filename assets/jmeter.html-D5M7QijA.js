import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as d,b as t,e,d as l,a as i}from"./app-D1uezr0R.js";const g="/assets/true-image-20210912164842416-BUh5aI4-.png",c="/assets/true-image-20210912165122290-DyTa0Gp_.png",o="/assets/true-image-20210912170227440-Bj_hPJpW.png",p="/assets/true-image-20210912170316913-DncXvK3V.png",m="/assets/true-image-20210912170626005-uc7YsFbd.png",u="/assets/true-image-20210912172411783-CbILb4zw.png",v="/assets/true-image-20210912172525710-DyVK7IMW.png",y="/assets/true-image-20210912180525701-CLwdJHrK.png",x="/assets/true-image-20210912184827240-DTLLM1bN.png",h="/assets/true-image-20210912180352133--Sl8CvK3.png",b="/assets/true-image-20210912180334354-KdzAw_YF.png",f="/assets/true-20210912190103-DMqq52uf.png",_="/assets/true-image-20210912190440872-p9avJTRf.png",C="/assets/true-image-20210912223900240-CohkMsJC.png",L="/assets/true-image-20210912224327322-L1vnPnnm.png",j={},z=i('<p>Jmeter性能压测工具</p><h2 id="指标" tabindex="-1"><a class="header-anchor" href="#指标"><span>-- 指标</span></a></h2><p><img src="'+g+'" alt="" loading="lazy"><br><img src="'+c+'" alt="" loading="lazy"></p><h2 id="jmeter" tabindex="-1"><a class="header-anchor" href="#jmeter"><span>-- Jmeter</span></a></h2>',4),V={href:"https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.tgz",target:"_blank",rel:"noopener noreferrer"},k={href:"https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.zip",target:"_blank",rel:"noopener noreferrer"},J=i('<figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>常用：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>受【cpu,jvm,数据库，网络IO，中间件】分配等影响</p><h2 id="堆内存-垃圾回收" tabindex="-1"><a class="header-anchor" href="#堆内存-垃圾回收"><span>-- 堆内存&amp;垃圾回收</span></a></h2><p>jvm</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><p>堆空间</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><p>堆：</p><p>新生代</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>老年代</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="性能监控" tabindex="-1"><a class="header-anchor" href="#性能监控"><span>-- 性能监控</span></a></h2><p>jconsole&amp; jvisualvm</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',24),q={href:"https://visualvm.github.io/pluginscenters.html",target:"_blank",rel:"noopener noreferrer"},E=i(`<p>运行压力测试+visualvm，检测jvm使用情况</p><table><thead><tr><th style="text-align:left;">测试指标</th><th style="text-align:center;">压测线程数</th><th style="text-align:center;">吞吐量/s</th><th style="text-align:center;">90%响应时间</th><th style="text-align:center;">99%响应时间</th></tr></thead><tbody><tr><td style="text-align:left;">Nginx</td><td style="text-align:center;">80</td><td style="text-align:center;">40,063.148</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:left;">Gateway</td><td style="text-align:center;">80</td><td style="text-align:center;">36,176.975</td><td style="text-align:center;">4</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:left;">简单服务 8100:hello</td><td style="text-align:center;">80</td><td style="text-align:center;">45,053.433</td><td style="text-align:center;">3</td><td style="text-align:center;">6</td></tr><tr><td style="text-align:left;">Gateway+简单服务</td><td style="text-align:center;">80</td><td style="text-align:center;">12,609.957</td><td style="text-align:center;">10</td><td style="text-align:center;">18</td></tr><tr><td style="text-align:left;">全链路</td><td style="text-align:center;">80</td><td style="text-align:center;">12,444.525</td><td style="text-align:center;">11</td><td style="text-align:center;">18</td></tr><tr><td style="text-align:left;">全链路（Nginx动静分离）</td><td style="text-align:center;">200</td><td style="text-align:center;">16,049.027</td><td style="text-align:center;">18</td><td style="text-align:center;">58</td></tr><tr><td style="text-align:left;">全链路（Nginx动静分离+缓存+去log+索引）</td><td style="text-align:center;">200</td><td style="text-align:center;">16,060.535</td><td style="text-align:center;">18</td><td style="text-align:center;">56</td></tr><tr><td style="text-align:left;">首页1级菜单渲染</td><td style="text-align:center;">80</td><td style="text-align:center;">1,373.826(db,渲染)</td><td style="text-align:center;">66</td><td style="text-align:center;">86</td></tr><tr><td style="text-align:left;">首页渲染(开缓存)</td><td style="text-align:center;">80</td><td style="text-align:center;">2,204.165</td><td style="text-align:center;">53</td><td style="text-align:center;">85</td></tr><tr><td style="text-align:left;">首页渲染(开缓存+去log+sql索引)</td><td style="text-align:center;">80</td><td style="text-align:center;">3,156.914</td><td style="text-align:center;">29</td><td style="text-align:center;">37</td></tr><tr><td style="text-align:left;">3级分类数据获取</td><td style="text-align:center;">80</td><td style="text-align:center;">27.616(db)</td><td style="text-align:center;">3,207</td><td style="text-align:center;">3,414</td></tr><tr><td style="text-align:left;">3级分类数据获取(开缓存+去log+sql索引)</td><td style="text-align:center;">80</td><td style="text-align:center;">49.132</td><td style="text-align:center;">1,703</td><td style="text-align:center;">1,927</td></tr><tr><td style="text-align:left;">3级分类数据获取(业务优化+关缓存+log+sql索引)</td><td style="text-align:center;">80</td><td style="text-align:center;">310.131</td><td style="text-align:center;">436</td><td style="text-align:center;">646</td></tr><tr><td style="text-align:left;">3级分类数据获取(redis+业务优化+关缓存+log+sql索引)</td><td style="text-align:center;">80</td><td style="text-align:center;">4,890.867</td><td style="text-align:center;">25</td><td style="text-align:center;">43</td></tr><tr><td style="text-align:left;">首页全量数据获取</td><td style="text-align:center;">80</td><td style="text-align:center;">19.157</td><td style="text-align:center;">661</td><td style="text-align:center;">798</td></tr><tr><td style="text-align:left;">首页全量数据获取(开缓存+去log+sql索引)</td><td style="text-align:center;">80</td><td style="text-align:center;">65.36</td><td style="text-align:center;">1,513</td><td style="text-align:center;">1,845</td></tr><tr><td style="text-align:left;">首页全量数据获取(Nginx动静分离+开缓存+去log+sql索引)</td><td style="text-align:center;">80/200</td><td style="text-align:center;">17,460.284/16,066.387</td><td style="text-align:center;">8/18</td><td style="text-align:center;">21/59</td></tr><tr><td style="text-align:left;">Nginx+Gateway</td><td style="text-align:center;">80</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>1、中间件有多，性能损失越大</p><p>业务：db(MySQL+创建索引)、模板的渲染速度、静态资源</p><h3 id="首页渲染-开缓存-去log-sql" tabindex="-1"><a class="header-anchor" href="#首页渲染-开缓存-去log-sql"><span>--- 首页渲染(开缓存+去log+sql)</span></a></h3><p>getLevel1Categorys-》db无索引，开缓存，去log：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>消耗时间：56
消耗时间：4
消耗时间：2
消耗时间：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getLevel1Categorys-》db有索引，开缓存，去log：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>消耗时间：5
消耗时间：1
消耗时间：1
消耗时间：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx动静分离" tabindex="-1"><a class="header-anchor" href="#nginx动静分离"><span>-- Nginx动静分离</span></a></h2><figure><img src="`+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1、以后将所有项目的静态资源都应该放在nginx里面<br> 2、规则: /static/**所有请求都由nginx直接返回</p><figure><img src="'+L+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>location / {
 proxy_pass http://yumall;
    #proxy_set_header Host $host;
}

location /static/ {
   #root /usr/share/nginx/html; #docker
   root html; #非docker运行
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),N={href:"http://yumall.com/static/index/img/img_01.png",target:"_blank",rel:"noopener noreferrer"},I=i(`<p>压力测试</p><h2 id="示例-getcatalogjson优化" tabindex="-1"><a class="header-anchor" href="#示例-getcatalogjson优化"><span>-- 示例：getCataLogJson优化</span></a></h2><p>将数据库的多次查询放到一次，</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/*
将数据库的多次查询放到一次，
 */
List&lt;CategoryEntity&gt; categoryEntities0 = baseMapper.selectList(null);

//1、查出所有1级分类
List&lt;CategoryEntity&gt; level1Categorys = getParent_cid(categoryEntities0, 0L);
//2、封装数据
Map&lt;String, List&lt;Catalog2Vo&gt;&gt; parent_cid = level1Categorys.stream().collect(Collectors.toMap(k -&gt; k.getCatId().toString(), v -&gt; {
    //1. 每一个的一级分类，查到这个一级分类的二级分类
    List&lt;CategoryEntity&gt; categoryEntities = getParent_cid(categoryEntities0, v.getCatId());
    //封装上面的结果
    List&lt;Catalog2Vo&gt; catalog2VoList = null;
    if (categoryEntities != null) {
        catalog2VoList = categoryEntities.stream().map(l2 -&gt; {
            Catalog2Vo catalog2Vo = new Catalog2Vo(l2.getCatId().toString(), null, l2.getCatId().toString(), l2.getName());
            //查到这个二级分类的三级分类
            List&lt;CategoryEntity&gt; leve3CataLog = getParent_cid(categoryEntities0, l2.getCatId());
            if (leve3CataLog != null) {
                List&lt;Catalog2Vo.Catalog3Vo&gt; collect = leve3CataLog.stream().map(l3 -&gt; {
                    Catalog2Vo.Catalog3Vo catalog3Vo = new Catalog2Vo.Catalog3Vo(l2.getCatId().toString(), l3.getCatId().toString(), l3.getName());

                    return catalog3Vo;
                }).collect(Collectors.toList());
                catalog2Vo.setCatalog3List(collect);
            }
            return catalog2Vo;
        }).collect(Collectors.toList());
    }
    return catalog2VoList;
}));
return parent_cid;

--------------------------------------------
  private List&lt;CategoryEntity&gt; getParent_cid(List&lt;CategoryEntity&gt; selectCategory, Long catId) {
//        return baseMapper.selectList(new QueryWrapper&lt;CategoryEntity&gt;().eq(&quot;parent_cid&quot;, catId));
        return selectCategory.stream().filter(item -&gt; item.getParentCid() == catId).collect(Collectors.toList());
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function T(w,M){const n=s("ExternalLinkIcon");return r(),d("div",null,[z,t("p",null,[e("下载："),t("a",V,[e("https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.tgz"),l(n)])]),t("p",null,[t("a",k,[e("https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.zip"),l(n)])]),J,t("p",null,[e("安装插件报错地址："),t("a",q,[e("https://visualvm.github.io/pluginscenters.html"),l(n)])]),E,t("p",null,[t("a",N,[e("http://yumall.com/static/index/img/img_01.png"),l(n)])]),I])}const D=a(j,[["render",T],["__file","jmeter.html.vue"]]),Z=JSON.parse('{"path":"/java/jmeter.html","title":"Jmeter性能压测","lang":"zh-CN","frontmatter":{"icon":"java","title":"Jmeter性能压测","category":["Java"],"headerDepth":5,"date":"2020-01-01T00:00:00.000Z","tag":["测试工具"],"description":"Jmeter性能压测工具","head":[["meta",{"property":"og:url","content":"https://blogres.github.io/java/jmeter.html"}],["meta",{"property":"og:title","content":"Jmeter性能压测"}],["meta",{"property":"og:description","content":"Jmeter性能压测工具"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T11:49:35.000Z"}],["meta",{"property":"article:author","content":"blogres"}],["meta",{"property":"article:tag","content":"测试工具"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-02T11:49:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jmeter性能压测\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-02T11:49:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blogres\\",\\"url\\":\\"/article\\"}]}"]]},"headers":[{"level":2,"title":"-- 指标","slug":"指标","link":"#指标","children":[]},{"level":2,"title":"-- Jmeter","slug":"jmeter","link":"#jmeter","children":[]},{"level":2,"title":"-- 堆内存&垃圾回收","slug":"堆内存-垃圾回收","link":"#堆内存-垃圾回收","children":[]},{"level":2,"title":"-- 性能监控","slug":"性能监控","link":"#性能监控","children":[{"level":3,"title":"--- 首页渲染(开缓存+去log+sql)","slug":"首页渲染-开缓存-去log-sql","link":"#首页渲染-开缓存-去log-sql","children":[]}]},{"level":2,"title":"-- Nginx动静分离","slug":"nginx动静分离","link":"#nginx动静分离","children":[]},{"level":2,"title":"-- 示例：getCataLogJson优化","slug":"示例-getcatalogjson优化","link":"#示例-getcatalogjson优化","children":[]}],"git":{"createdTime":1706536810000,"updatedTime":1706874575000,"contributors":[{"name":"topjfy","email":"topjfk@163.com","commits":2}]},"readingTime":{"minutes":2.73,"words":818},"filePathRelative":"java/jmeter.md","localizedDate":"2020年1月1日","excerpt":"<p>Jmeter性能压测工具</p>\\n","autoDesc":true}');export{D as comp,Z as data};
